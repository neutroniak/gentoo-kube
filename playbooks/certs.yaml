---
    # creates pki dir
    - name: "Kubernetes PKI dir"
      file:
        path: "/etc/kubernetes/pki"
        state: directory
        owner: root
        mode: u=rwx,g=rx,o=rx

    - name: "Kubernetes PKI dir"
      file:
        path: "/etc/etcd/pki"
        state: directory
        owner: etcd
        mode: u=rwx,g=rx,o=rx

    # put ssl config files
    - name: "Copy openssl config files"
      copy:
        src: "{{ item.src }}"
        dest: "/etc/kubernetes/pki"
      with_items:
        - {"src":"../resources/openssl.conf"}
        - {"src":"../resources/openssl_ca.conf"}

    - name: "Replace Hostname"
      replace:
        path: "{{ item.path }}"
        regexp: "{HOSTNAME}"
        replace: "{{ansible_hostname}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace IP"
      replace:
        path: "{{ item.path }}"
        regexp: "{INSTANCE_IP}"
        replace: "{{ansible_default_ipv4.address}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace OpenSSL C"
      replace:
        path: "{{ item.path }}"
        regexp: "{OPENSSL_C}"
        replace: "{{kconf.openssl_c}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace OpenSSL ST"
      replace:
        path: "{{ item.path }}"
        regexp: "{OPENSSL_ST}"
        replace: "{{kconf.openssl_st}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace OpenSSL L"
      replace:
        path: "{{ item.path }}"
        regexp: "{OPENSSL_L}"
        replace: "{{kconf.openssl_l}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace OpenSSL O"
      replace:
        path: "{{ item.path }}"
        regexp: "{OPENSSL_O}"
        replace: "{{kconf.openssl_o}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace OpenSSL OU"
      replace:
        path: "{{ item.path }}"
        regexp: "{OPENSSL_OU}"
        replace: "{{kconf.openssl_ou}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    - name: "Replace Cluster Name"
      replace:
        path: "{{ item.path }}"
        regexp: "{API_ENDPOINT}"
        replace: "{{kconf.api_endpoint}}"
      with_items:
        - {"path":"/etc/kubernetes/pki/openssl.conf"}
        - {"path":"/etc/kubernetes/pki/openssl_ca.conf"}

    # create ca pair
    - name: "check ca.key"
      stat:
        path: "/etc/kubernetes/pki/ca.key"
      register: has_cakey
    - name: "Openssl CA key"
      shell: "openssl genrsa -out ca.key 2048"
      args:
        chdir: "/etc/kubernetes/pki"
      when: not has_cakey.stat.exists
    - name: "check ca.crt"
      stat:
        path: "/etc/kubernetes/pki/ca.crt"
      register: has_cacrt
    - name: "Openssl CA crt"
      shell: 'openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -extensions v3_ext -config openssl_ca.conf'
      args:
        chdir: "/etc/kubernetes/pki"
      when: not has_cacrt.stat.exists
    - name: "Copy ca.key to local"
      fetch:
        src: "/etc/kubernetes/pki/ca.key"
        dest: "../data/ca.key"
        flat: true
    - name: "Copy ca.crt to local"
      fetch:
        src: "/etc/kubernetes/pki/ca.crt"
        dest: "../data/ca.crt"
        flat: true

    # etcd cert
    - name: "etcd key"
      shell: 'openssl genrsa -out etcd.key 2048'
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "etcd csr"
      shell: "openssl req -new -key etcd.key -out etcd.csr -in openssl.conf -subj \"/CN={{ansible_hostname}}\""
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "etcd crt"
      shell: "openssl x509 -req -in etcd.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 3650 -outform PEM -out etcd.crt -extensions v3_ext -extfile openssl.conf"
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "Copy ca.crt to etcd"
      copy:
        src: "/etc/kubernetes/pki/ca.crt"
        dest: "/etc/etcd/pki/ca.crt"
        remote_src: yes
    - name: "Move etcd key to etcd pki"
      copy:
        src: "/etc/kubernetes/pki/etcd.key"
        dest: "/etc/etcd/pki/etcd.key"
        remote_src: yes
    - name: "Move etcd crt to etcd pki"
      copy:
        src: "/etc/kubernetes/pki/etcd.crt"
        dest: "/etc/etcd/pki/etcd.crt"
        remote_src: yes

    # kube-apiserver cert
    - name: "kube-apiserver key"
      shell: 'openssl genrsa -out kube-apiserver.key 2048'
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-apiserver csr"
      shell: "openssl req -new -key kube-apiserver.key -out kube-apiserver.csr -in openssl.conf -subj \"/CN={{ansible_hostname}}\""
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-apiserver crt"
      shell: "openssl x509 -req -in kube-apiserver.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 3650 -outform PEM -out kube-apiserver.crt -extensions v3_ext -extfile openssl.conf"
      args:
        chdir: "/etc/kubernetes/pki"

    # kube-controller-manager cert
    - name: "kube-controller-manager key"
      shell: 'openssl genrsa -out kube-controller-manager.key 2048'
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-controller-manager csr"
      shell: "openssl req -new -key kube-controller-manager.key -out kube-controller-manager.csr -in openssl.conf -subj \"/CN=system:kube-controller-manager\""
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-controller-manager crt"
      shell: "openssl x509 -req -in kube-controller-manager.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 3650 -outform PEM -out kube-controller-manager.crt"
      args:
        chdir: "/etc/kubernetes/pki"

    # kube-scheduler cert
    - name: "kube-scheduler key"
      shell: 'openssl genrsa -out kube-scheduler.key 2048'
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-scheduler csr"
      shell: "openssl req -new -key kube-scheduler.key -out kube-scheduler.csr -in openssl.conf -subj \"/CN=system:kube-scheduler\""
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "kube-scheduler crt"
      shell: "openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 3650 -outform PEM -out kube-scheduler.crt"
      args:
        chdir: "/etc/kubernetes/pki"

    # admin cert
    - name: "admin key"
      shell: 'openssl genrsa -out admin.key 2048'
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "admin csr"
      shell: "openssl req -new -key admin.key -out admin.csr -in openssl.conf -subj \"/CN=admin\""
      args:
        chdir: "/etc/kubernetes/pki"
    - name: "admin crt"
      shell: "openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -set_serial 101 -days 3650 -outform PEM -out admin.crt"
      args:
        chdir: "/etc/kubernetes/pki"


